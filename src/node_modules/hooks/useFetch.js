import {useCallback, useEffect, useState} from "react"
import axios from "axios"

export default url => {
    //pro
    //'52ad60f5-529d-4cdd-ab6e-295e16a10e91'
    //const baseUrl = 'https://cors-anywhere.herokuapp.com/https://pro-api.coinmarketcap.com/v1'
    //sandbox
    //d1505ef1-4123-4a73-8149-c7c8514176df
    const baseUrl = 'https://cors-anywhere.herokuapp.com/https://sandbox-api.coinmarketcap.com/v1'


    const [isLoading, setIsLoading] = useState(false)
    const [response, setResponse] = useState(null)
    const [error, setError] = useState(null)
    const [options, setOptions] = useState({})

    const doFetch = useCallback((options = {}) => {
        setOptions(options)
        setIsLoading(true)
    }, [])

    //ext API
    useEffect(() => {
        let skipGetResponseAfterDestroy = false

        const requestOptions = {
            ...options,
            ...{
                headers: {
                    'X-CMC_PRO_API_KEY': 'd1505ef1-4123-4a73-8149-c7c8514176df',
                    Accept: "application/json",
                }
            }
        }

        if (!isLoading) {
            return
        }
        axios(baseUrl + url, requestOptions)
            .then(res => {
                if (!skipGetResponseAfterDestroy) {
                    setIsLoading(false)
                    setResponse(res.data)
                }
            })
            .catch(error => {
                console.log('Got error:', error)
                //unAuth
                if (!skipGetResponseAfterDestroy) {
                    setIsLoading(false)
                    setError(error.response.data)
                }
            })
        return () => {
            skipGetResponseAfterDestroy = true
        }
    }, [isLoading, url, options])

    return [{response, isLoading, error}, doFetch]
}