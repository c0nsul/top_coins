import React, {Fragment, useEffect, useState} from "react"
import {stringify} from "query-string"
import {useHistory} from "react-router-dom"

import useFetch from 'hooks/useFetch'
import Feed from 'components/feed'
import Pagination from 'components/pagination'
import {getPaginator, startLimit} from "utils"
import Loading from 'components/loading'
import ErrorMessage from 'components/errorMessage'

const Coins = ({location, match}) => {
    let history = useHistory()
    const url = match.url
    const [limit, setLimit] = useState(startLimit)
    let {currentPage, start} = getPaginator(location.search, limit)
    const stringifiedParams = stringify({
        limit,
        start
    })

    const maxCount = 100

    const apiUrl = `/cryptocurrency/listings/latest?convert=USD&${stringifiedParams}`
    const [{response, isLoading, error}, doFetch] = useFetch(apiUrl)

    const handleChange = (event) => {
        history.push('/?page=1')
        setLimit(event.target.value);
    }


    useEffect(() => {
        doFetch()
    }, [doFetch, currentPage, limit])


    return (
        <div className="home-page">
            <div className="banner">
                <div className="container">
                    <h1>Top coins</h1>
                    <p>Test react App</p>
                </div>
            </div>
            <div className="container page">

                <select value={limit} onChange={handleChange}>
                    <option value="10">10</option>
                    <option value="50">50</option>
                    <option value="100">100</option>
                </select>

                <table className="table">
                    <thead>
                    <tr key="0">
                        <th scope="col">Rank#</th>
                        <th scope="col">Name</th>
                        <th scope="col">Price</th>
                        <th scope="col">Price Change (24h)</th>
                        <th scope="col">Market Cap</th>
                        <th scope="col">Volume (24h)</th>
                    </tr>
                    </thead>
                    {isLoading && <Loading/>}
                    {error && <ErrorMessage/>}
                    {!isLoading && response && (
                        <Fragment>
                            <Feed coins={response.data}/>
                            <Pagination total={maxCount} limit={limit} url={url} currentPage={currentPage}/>
                        </Fragment>
                    )}
                </table>
            </div>
        </div>
    )
}

export default Coins